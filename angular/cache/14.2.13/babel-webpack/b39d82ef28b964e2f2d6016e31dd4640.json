{"ast":null,"code":"import { ConnectableObservable, isObservable, of, Subject } from 'rxjs';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable } from '@angular/core';\n\nclass DataSource {}\n/** Checks whether an object is a data source. */\n\n\nfunction isDataSource(value) {\n  // Check if the value is a DataSource by observing if it has a connect function. Cannot\n  // be checked as an `instanceof DataSource` since people could create their own sources\n  // that match the interface, but don't extend DataSource. We also can't use `isObservable`\n  // here, because of some internal apps.\n  return value && typeof value.connect === 'function' && !(value instanceof ConnectableObservable);\n}\n/** DataSource wrapper for a native array. */\n\n\nclass ArrayDataSource extends DataSource {\n  constructor(_data) {\n    super();\n    this._data = _data;\n  }\n\n  connect() {\n    return isObservable(this._data) ? this._data : of(this._data);\n  }\n\n  disconnect() {}\n\n}\n/** Indicates how a view was changed by a {@link _ViewRepeater}. */\n\n\nvar _ViewRepeaterOperation;\n\n(function (_ViewRepeaterOperation) {\n  /** The content of an existing view was replaced with another item. */\n  _ViewRepeaterOperation[_ViewRepeaterOperation[\"REPLACED\"] = 0] = \"REPLACED\";\n  /** A new view was created with `createEmbeddedView`. */\n\n  _ViewRepeaterOperation[_ViewRepeaterOperation[\"INSERTED\"] = 1] = \"INSERTED\";\n  /** The position of a view changed, but the content remains the same. */\n\n  _ViewRepeaterOperation[_ViewRepeaterOperation[\"MOVED\"] = 2] = \"MOVED\";\n  /** A view was detached from the view container. */\n\n  _ViewRepeaterOperation[_ViewRepeaterOperation[\"REMOVED\"] = 3] = \"REMOVED\";\n})(_ViewRepeaterOperation || (_ViewRepeaterOperation = {}));\n/**\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\n * @docs-private\n */\n\n\nconst _VIEW_REPEATER_STRATEGY = new InjectionToken('_ViewRepeater');\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\n\n\nclass _DisposeViewRepeaterStrategy {\n  applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n    changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n      let view;\n      let operation;\n\n      if (record.previousIndex == null) {\n        const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n        view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\n        operation = _ViewRepeaterOperation.INSERTED;\n      } else if (currentIndex == null) {\n        viewContainerRef.remove(adjustedPreviousIndex);\n        operation = _ViewRepeaterOperation.REMOVED;\n      } else {\n        view = viewContainerRef.get(adjustedPreviousIndex);\n        viewContainerRef.move(view, currentIndex);\n        operation = _ViewRepeaterOperation.MOVED;\n      }\n\n      if (itemViewChanged) {\n        itemViewChanged({\n          context: view?.context,\n          operation,\n          record\n        });\n      }\n    });\n  }\n\n  detach() {}\n\n}\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\n\n\nclass _RecycleViewRepeaterStrategy {\n  constructor() {\n    /**\n     * The size of the cache used to store unused views.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n     */\n    this.viewCacheSize = 20;\n    /**\n     * View cache that stores embedded view instances that have been previously stamped out,\n     * but don't are not currently rendered. The view repeater will reuse these views rather than\n     * creating brand new ones.\n     *\n     * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n     */\n\n    this._viewCache = [];\n  }\n  /** Apply changes to the DOM. */\n\n\n  applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n    // Rearrange the views to put them in the right location.\n    changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n      let view;\n      let operation;\n\n      if (record.previousIndex == null) {\n        // Item added.\n        const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n\n        view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\n        operation = view ? _ViewRepeaterOperation.INSERTED : _ViewRepeaterOperation.REPLACED;\n      } else if (currentIndex == null) {\n        // Item removed.\n        this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\n\n        operation = _ViewRepeaterOperation.REMOVED;\n      } else {\n        // Item moved.\n        view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\n        operation = _ViewRepeaterOperation.MOVED;\n      }\n\n      if (itemViewChanged) {\n        itemViewChanged({\n          context: view?.context,\n          operation,\n          record\n        });\n      }\n    });\n  }\n\n  detach() {\n    for (const view of this._viewCache) {\n      view.destroy();\n    }\n\n    this._viewCache = [];\n  }\n  /**\n   * Inserts a view for a new item, either from the cache or by creating a new\n   * one. Returns `undefined` if the item was inserted into a cached view.\n   */\n\n\n  _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\n    const cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\n\n    if (cachedView) {\n      cachedView.context.$implicit = value;\n      return undefined;\n    }\n\n    const viewArgs = viewArgsFactory();\n    return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\n  }\n  /** Detaches the view at the given index and inserts into the view cache. */\n\n\n  _detachAndCacheView(index, viewContainerRef) {\n    const detachedView = viewContainerRef.detach(index);\n\n    this._maybeCacheView(detachedView, viewContainerRef);\n  }\n  /** Moves view at the previous index to the current index. */\n\n\n  _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\n    const view = viewContainerRef.get(adjustedPreviousIndex);\n    viewContainerRef.move(view, currentIndex);\n    view.context.$implicit = value;\n    return view;\n  }\n  /**\n   * Cache the given detached view. If the cache is full, the view will be\n   * destroyed.\n   */\n\n\n  _maybeCacheView(view, viewContainerRef) {\n    if (this._viewCache.length < this.viewCacheSize) {\n      this._viewCache.push(view);\n    } else {\n      const index = viewContainerRef.indexOf(view); // The host component could remove views from the container outside of\n      // the view repeater. It's unlikely this will occur, but just in case,\n      // destroy the view on its own, otherwise destroy it through the\n      // container to ensure that all the references are removed.\n\n      if (index === -1) {\n        view.destroy();\n      } else {\n        viewContainerRef.remove(index);\n      }\n    }\n  }\n  /** Inserts a recycled view from the cache at the given index. */\n\n\n  _insertViewFromCache(index, viewContainerRef) {\n    const cachedView = this._viewCache.pop();\n\n    if (cachedView) {\n      viewContainerRef.insert(cachedView, index);\n    }\n\n    return cachedView || null;\n  }\n\n}\n/**\n * Class to be used to power selecting one or more options from a list.\n */\n\n\nclass SelectionModel {\n  /** Selected values. */\n  get selected() {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n\n  constructor(_multiple = false, initiallySelectedValues, _emitChanges = true, compareWith) {\n    this._multiple = _multiple;\n    this._emitChanges = _emitChanges;\n    this.compareWith = compareWith;\n    /** Currently-selected values. */\n\n    this._selection = new Set();\n    /** Keeps track of the deselected options that haven't been emitted by the change event. */\n\n    this._deselectedToEmit = [];\n    /** Keeps track of the selected options that haven't been emitted by the change event. */\n\n    this._selectedToEmit = [];\n    /** Event emitted when the value has changed. */\n\n    this.changed = new Subject();\n\n    if (initiallySelectedValues && initiallySelectedValues.length) {\n      if (_multiple) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      } // Clear the array in order to avoid firing the change event for preselected values.\n\n\n      this._selectedToEmit.length = 0;\n    }\n  }\n  /**\n   * Selects a value or an array of values.\n   * @param values The values to select\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n\n\n  select(...values) {\n    this._verifyValueAssignment(values);\n\n    values.forEach(value => this._markSelected(value));\n\n    const changed = this._hasQueuedChanges();\n\n    this._emitChangeEvent();\n\n    return changed;\n  }\n  /**\n   * Deselects a value or an array of values.\n   * @param values The values to deselect\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n\n\n  deselect(...values) {\n    this._verifyValueAssignment(values);\n\n    values.forEach(value => this._unmarkSelected(value));\n\n    const changed = this._hasQueuedChanges();\n\n    this._emitChangeEvent();\n\n    return changed;\n  }\n  /**\n   * Sets the selected values\n   * @param values The new selected values\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n\n\n  setSelection(...values) {\n    this._verifyValueAssignment(values);\n\n    const oldValues = this.selected;\n    const newSelectedSet = new Set(values);\n    values.forEach(value => this._markSelected(value));\n    oldValues.filter(value => !newSelectedSet.has(this._getConcreteValue(value, newSelectedSet))).forEach(value => this._unmarkSelected(value));\n\n    const changed = this._hasQueuedChanges();\n\n    this._emitChangeEvent();\n\n    return changed;\n  }\n  /**\n   * Toggles a value between selected and deselected.\n   * @param value The value to toggle\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n\n\n  toggle(value) {\n    return this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n  /**\n   * Clears all of the selected values.\n   * @param flushEvent Whether to flush the changes in an event.\n   *   If false, the changes to the selection will be flushed along with the next event.\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n\n\n  clear(flushEvent = true) {\n    this._unmarkAll();\n\n    const changed = this._hasQueuedChanges();\n\n    if (flushEvent) {\n      this._emitChangeEvent();\n    }\n\n    return changed;\n  }\n  /**\n   * Determines whether a value is selected.\n   */\n\n\n  isSelected(value) {\n    return this._selection.has(this._getConcreteValue(value));\n  }\n  /**\n   * Determines whether the model does not have a value.\n   */\n\n\n  isEmpty() {\n    return this._selection.size === 0;\n  }\n  /**\n   * Determines whether the model has a value.\n   */\n\n\n  hasValue() {\n    return !this.isEmpty();\n  }\n  /**\n   * Sorts the selected values based on a predicate function.\n   */\n\n\n  sort(predicate) {\n    if (this._multiple && this.selected) {\n      this._selected.sort(predicate);\n    }\n  }\n  /**\n   * Gets whether multiple values can be selected.\n   */\n\n\n  isMultipleSelection() {\n    return this._multiple;\n  }\n  /** Emits a change event and clears the records of selected and deselected values. */\n\n\n  _emitChangeEvent() {\n    // Clear the selected values so they can be re-cached.\n    this._selected = null;\n\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      this.changed.next({\n        source: this,\n        added: this._selectedToEmit,\n        removed: this._deselectedToEmit\n      });\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n  }\n  /** Selects a value. */\n\n\n  _markSelected(value) {\n    value = this._getConcreteValue(value);\n\n    if (!this.isSelected(value)) {\n      if (!this._multiple) {\n        this._unmarkAll();\n      }\n\n      if (!this.isSelected(value)) {\n        this._selection.add(value);\n      }\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n  /** Deselects a value. */\n\n\n  _unmarkSelected(value) {\n    value = this._getConcreteValue(value);\n\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n  /** Clears out the selected values. */\n\n\n  _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n  /**\n   * Verifies the value assignment and throws an error if the specified value array is\n   * including multiple values while the selection model is not supporting multiple values.\n   */\n\n\n  _verifyValueAssignment(values) {\n    if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMultipleValuesInSingleSelectionError();\n    }\n  }\n  /** Whether there are queued up change to be emitted. */\n\n\n  _hasQueuedChanges() {\n    return !!(this._deselectedToEmit.length || this._selectedToEmit.length);\n  }\n  /** Returns a value that is comparable to inputValue by applying compareWith function, returns the same inputValue otherwise. */\n\n\n  _getConcreteValue(inputValue, selection) {\n    if (!this.compareWith) {\n      return inputValue;\n    } else {\n      selection = selection ?? this._selection;\n\n      for (let selectedValue of selection) {\n        if (this.compareWith(inputValue, selectedValue)) {\n          return selectedValue;\n        }\n      }\n\n      return inputValue;\n    }\n  }\n\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\n\n\nfunction getMultipleValuesInSingleSelectionError() {\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n\n\nclass UniqueSelectionDispatcher {\n  constructor() {\n    this._listeners = [];\n  }\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n\n\n  notify(id, name) {\n    for (let listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n  /**\n   * Listen for future changes to item selection.\n   * @return Function used to deregister listener\n   */\n\n\n  listen(listener) {\n    this._listeners.push(listener);\n\n    return () => {\n      this._listeners = this._listeners.filter(registered => {\n        return listener !== registered;\n      });\n    };\n  }\n\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n\n  static #_ = this.ɵfac = function UniqueSelectionDispatcher_Factory(t) {\n    return new (t || UniqueSelectionDispatcher)();\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UniqueSelectionDispatcher,\n    factory: UniqueSelectionDispatcher.ɵfac,\n    providedIn: 'root'\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UniqueSelectionDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, _DisposeViewRepeaterStrategy, _RecycleViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY, _ViewRepeaterOperation, getMultipleValuesInSingleSelectionError, isDataSource };","map":{"version":3,"names":["ConnectableObservable","isObservable","of","Subject","i0","InjectionToken","Injectable","DataSource","isDataSource","value","connect","ArrayDataSource","constructor","_data","disconnect","_ViewRepeaterOperation","_VIEW_REPEATER_STRATEGY","_DisposeViewRepeaterStrategy","applyChanges","changes","viewContainerRef","itemContextFactory","itemValueResolver","itemViewChanged","forEachOperation","record","adjustedPreviousIndex","currentIndex","view","operation","previousIndex","insertContext","createEmbeddedView","templateRef","context","index","INSERTED","remove","REMOVED","get","move","MOVED","detach","_RecycleViewRepeaterStrategy","viewCacheSize","_viewCache","viewArgsFactory","_insertView","REPLACED","_detachAndCacheView","_moveView","destroy","cachedView","_insertViewFromCache","$implicit","undefined","viewArgs","detachedView","_maybeCacheView","length","push","indexOf","pop","insert","SelectionModel","selected","_selected","Array","from","_selection","values","_multiple","initiallySelectedValues","_emitChanges","compareWith","Set","_deselectedToEmit","_selectedToEmit","changed","forEach","_markSelected","select","_verifyValueAssignment","_hasQueuedChanges","_emitChangeEvent","deselect","_unmarkSelected","setSelection","oldValues","newSelectedSet","filter","has","_getConcreteValue","toggle","isSelected","clear","flushEvent","_unmarkAll","isEmpty","size","hasValue","sort","predicate","isMultipleSelection","next","source","added","removed","add","delete","ngDevMode","getMultipleValuesInSingleSelectionError","inputValue","selection","selectedValue","Error","UniqueSelectionDispatcher","_listeners","notify","id","name","listener","listen","registered","ngOnDestroy","ɵfac","ɵprov","type","args","providedIn"],"sources":["C:/projects/Ecom-shopcart/angular-ecommerce/node_modules/@angular/cdk/fesm2022/collections.mjs"],"sourcesContent":["import { ConnectableObservable, isObservable, of, Subject } from 'rxjs';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable } from '@angular/core';\n\nclass DataSource {\n}\n/** Checks whether an object is a data source. */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource. We also can't use `isObservable`\n    // here, because of some internal apps.\n    return value && typeof value.connect === 'function' && !(value instanceof ConnectableObservable);\n}\n\n/** DataSource wrapper for a native array. */\nclass ArrayDataSource extends DataSource {\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    connect() {\n        return isObservable(this._data) ? this._data : of(this._data);\n    }\n    disconnect() { }\n}\n\n/** Indicates how a view was changed by a {@link _ViewRepeater}. */\nvar _ViewRepeaterOperation;\n(function (_ViewRepeaterOperation) {\n    /** The content of an existing view was replaced with another item. */\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"REPLACED\"] = 0] = \"REPLACED\";\n    /** A new view was created with `createEmbeddedView`. */\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"INSERTED\"] = 1] = \"INSERTED\";\n    /** The position of a view changed, but the content remains the same. */\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"MOVED\"] = 2] = \"MOVED\";\n    /** A view was detached from the view container. */\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"REMOVED\"] = 3] = \"REMOVED\";\n})(_ViewRepeaterOperation || (_ViewRepeaterOperation = {}));\n/**\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\n * @docs-private\n */\nconst _VIEW_REPEATER_STRATEGY = new InjectionToken('_ViewRepeater');\n\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _DisposeViewRepeaterStrategy {\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\n                operation = _ViewRepeaterOperation.INSERTED;\n            }\n            else if (currentIndex == null) {\n                viewContainerRef.remove(adjustedPreviousIndex);\n                operation = _ViewRepeaterOperation.REMOVED;\n            }\n            else {\n                view = viewContainerRef.get(adjustedPreviousIndex);\n                viewContainerRef.move(view, currentIndex);\n                operation = _ViewRepeaterOperation.MOVED;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view?.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() { }\n}\n\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _RecycleViewRepeaterStrategy {\n    constructor() {\n        /**\n         * The size of the cache used to store unused views.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n         */\n        this.viewCacheSize = 20;\n        /**\n         * View cache that stores embedded view instances that have been previously stamped out,\n         * but don't are not currently rendered. The view repeater will reuse these views rather than\n         * creating brand new ones.\n         *\n         * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n         */\n        this._viewCache = [];\n    }\n    /** Apply changes to the DOM. */\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                // Item added.\n                const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = view ? _ViewRepeaterOperation.INSERTED : _ViewRepeaterOperation.REPLACED;\n            }\n            else if (currentIndex == null) {\n                // Item removed.\n                this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\n                operation = _ViewRepeaterOperation.REMOVED;\n            }\n            else {\n                // Item moved.\n                view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = _ViewRepeaterOperation.MOVED;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view?.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() {\n        for (const view of this._viewCache) {\n            view.destroy();\n        }\n        this._viewCache = [];\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new\n     * one. Returns `undefined` if the item was inserted into a cached view.\n     */\n    _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\n        const cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\n        if (cachedView) {\n            cachedView.context.$implicit = value;\n            return undefined;\n        }\n        const viewArgs = viewArgsFactory();\n        return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\n    }\n    /** Detaches the view at the given index and inserts into the view cache. */\n    _detachAndCacheView(index, viewContainerRef) {\n        const detachedView = viewContainerRef.detach(index);\n        this._maybeCacheView(detachedView, viewContainerRef);\n    }\n    /** Moves view at the previous index to the current index. */\n    _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\n        const view = viewContainerRef.get(adjustedPreviousIndex);\n        viewContainerRef.move(view, currentIndex);\n        view.context.$implicit = value;\n        return view;\n    }\n    /**\n     * Cache the given detached view. If the cache is full, the view will be\n     * destroyed.\n     */\n    _maybeCacheView(view, viewContainerRef) {\n        if (this._viewCache.length < this.viewCacheSize) {\n            this._viewCache.push(view);\n        }\n        else {\n            const index = viewContainerRef.indexOf(view);\n            // The host component could remove views from the container outside of\n            // the view repeater. It's unlikely this will occur, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                viewContainerRef.remove(index);\n            }\n        }\n    }\n    /** Inserts a recycled view from the cache at the given index. */\n    _insertViewFromCache(index, viewContainerRef) {\n        const cachedView = this._viewCache.pop();\n        if (cachedView) {\n            viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n}\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nclass SelectionModel {\n    /** Selected values. */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true, compareWith) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        this.compareWith = compareWith;\n        /** Currently-selected values. */\n        this._selection = new Set();\n        /** Keeps track of the deselected options that haven't been emitted by the change event. */\n        this._deselectedToEmit = [];\n        /** Keeps track of the selected options that haven't been emitted by the change event. */\n        this._selectedToEmit = [];\n        /** Event emitted when the value has changed. */\n        this.changed = new Subject();\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(value => this._markSelected(value));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /**\n     * Selects a value or an array of values.\n     * @param values The values to select\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._markSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Deselects a value or an array of values.\n     * @param values The values to deselect\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._unmarkSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Sets the selected values\n     * @param values The new selected values\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    setSelection(...values) {\n        this._verifyValueAssignment(values);\n        const oldValues = this.selected;\n        const newSelectedSet = new Set(values);\n        values.forEach(value => this._markSelected(value));\n        oldValues\n            .filter(value => !newSelectedSet.has(this._getConcreteValue(value, newSelectedSet)))\n            .forEach(value => this._unmarkSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     * @param value The value to toggle\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    toggle(value) {\n        return this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     * @param flushEvent Whether to flush the changes in an event.\n     *   If false, the changes to the selection will be flushed along with the next event.\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    clear(flushEvent = true) {\n        this._unmarkAll();\n        const changed = this._hasQueuedChanges();\n        if (flushEvent) {\n            this._emitChangeEvent();\n        }\n        return changed;\n    }\n    /**\n     * Determines whether a value is selected.\n     */\n    isSelected(value) {\n        return this._selection.has(this._getConcreteValue(value));\n    }\n    /**\n     * Determines whether the model does not have a value.\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            this._selected.sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /** Emits a change event and clears the records of selected and deselected values. */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit,\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /** Selects a value. */\n    _markSelected(value) {\n        value = this._getConcreteValue(value);\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            if (!this.isSelected(value)) {\n                this._selection.add(value);\n            }\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /** Deselects a value. */\n    _unmarkSelected(value) {\n        value = this._getConcreteValue(value);\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /** Clears out the selected values. */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach(value => this._unmarkSelected(value));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n    /** Whether there are queued up change to be emitted. */\n    _hasQueuedChanges() {\n        return !!(this._deselectedToEmit.length || this._selectedToEmit.length);\n    }\n    /** Returns a value that is comparable to inputValue by applying compareWith function, returns the same inputValue otherwise. */\n    _getConcreteValue(inputValue, selection) {\n        if (!this.compareWith) {\n            return inputValue;\n        }\n        else {\n            selection = selection ?? this._selection;\n            for (let selectedValue of selection) {\n                if (this.compareWith(inputValue, selectedValue)) {\n                    return selectedValue;\n                }\n            }\n            return inputValue;\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    constructor() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return () => {\n            this._listeners = this._listeners.filter((registered) => {\n                return listener !== registered;\n            });\n        };\n    }\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.1.0-next.3\", ngImport: i0, type: UniqueSelectionDispatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.1.0-next.3\", ngImport: i0, type: UniqueSelectionDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.1.0-next.3\", ngImport: i0, type: UniqueSelectionDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, _DisposeViewRepeaterStrategy, _RecycleViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY, _ViewRepeaterOperation, getMultipleValuesInSingleSelectionError, isDataSource };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}